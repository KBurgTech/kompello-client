/* tslint:disable */
/* eslint-disable */
/**
 * Kompello Server API
 * Kompello Server API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginResponse,
  Register,
  SocialAuthLogin,
  TokenRefresh,
  UserPasswordLogin,
} from '../models/index';
import {
    LoginResponseFromJSON,
    LoginResponseToJSON,
    RegisterFromJSON,
    RegisterToJSON,
    SocialAuthLoginFromJSON,
    SocialAuthLoginToJSON,
    TokenRefreshFromJSON,
    TokenRefreshToJSON,
    UserPasswordLoginFromJSON,
    UserPasswordLoginToJSON,
} from '../models/index';

export interface AuthRefreshCreateRequest {
    tokenRefresh: TokenRefresh;
}

export interface PasswordAuthRequest {
    userPasswordLogin: UserPasswordLogin;
}

export interface RegisterRequest {
    register: Register;
}

export interface SocialAuthRequest {
    socialAuthLogin: SocialAuthLogin;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async authRefreshCreateRaw(requestParameters: AuthRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRefresh>> {
        if (requestParameters.tokenRefresh === null || requestParameters.tokenRefresh === undefined) {
            throw new runtime.RequiredError('tokenRefresh','Required parameter requestParameters.tokenRefresh was null or undefined when calling authRefreshCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshToJSON(requestParameters.tokenRefresh),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshFromJSON(jsonValue));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async authRefreshCreate(requestParameters: AuthRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRefresh> {
        const response = await this.authRefreshCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log a user in and create a session
     */
    async passwordAuthRaw(requestParameters: PasswordAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.userPasswordLogin === null || requestParameters.userPasswordLogin === undefined) {
            throw new runtime.RequiredError('userPasswordLogin','Required parameter requestParameters.userPasswordLogin was null or undefined when calling passwordAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/standard/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserPasswordLoginToJSON(requestParameters.userPasswordLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Log a user in and create a session
     */
    async passwordAuth(requestParameters: PasswordAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.passwordAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user and create a session
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.register === null || requestParameters.register === undefined) {
            throw new runtime.RequiredError('register','Required parameter requestParameters.register was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/register/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user and create a session
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log a user in and create a session
     */
    async socialAuthRaw(requestParameters: SocialAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.socialAuthLogin === null || requestParameters.socialAuthLogin === undefined) {
            throw new runtime.RequiredError('socialAuthLogin','Required parameter requestParameters.socialAuthLogin was null or undefined when calling socialAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/social/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialAuthLoginToJSON(requestParameters.socialAuthLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Log a user in and create a session
     */
    async socialAuth(requestParameters: SocialAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.socialAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
