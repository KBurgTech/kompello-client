/* tslint:disable */
/* eslint-disable */
/**
 * Kompello Server API
 * Kompello Server API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTenant,
  SimpleResponse,
  Tenant,
  User,
  UserUuidList,
} from '../models/index';
import {
    PatchedTenantFromJSON,
    PatchedTenantToJSON,
    SimpleResponseFromJSON,
    SimpleResponseToJSON,
    TenantFromJSON,
    TenantToJSON,
    UserFromJSON,
    UserToJSON,
    UserUuidListFromJSON,
    UserUuidListToJSON,
} from '../models/index';

export interface TenantAddUsersRequest {
    uuid: string;
    userUuidList: UserUuidList;
}

export interface TenantRemoveUsersRequest {
    uuid: string;
    userUuidList: UserUuidList;
}

export interface TenantUsersRequest {
    uuid: string;
}

export interface TenantsCreateRequest {
    tenant: Tenant;
}

export interface TenantsDestroyRequest {
    uuid: string;
}

export interface TenantsPartialUpdateRequest {
    uuid: string;
    patchedTenant?: PatchedTenant;
}

export interface TenantsRetrieveRequest {
    uuid: string;
}

export interface TenantsUpdateRequest {
    uuid: string;
    tenant: Tenant;
}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI {

    /**
     * Add users to a tenant
     */
    async tenantAddUsersRaw(requestParameters: TenantAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantAddUsers.');
        }

        if (requestParameters.userUuidList === null || requestParameters.userUuidList === undefined) {
            throw new runtime.RequiredError('userUuidList','Required parameter requestParameters.userUuidList was null or undefined when calling tenantAddUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/add_users/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserUuidListToJSON(requestParameters.userUuidList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Add users to a tenant
     */
    async tenantAddUsers(requestParameters: TenantAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.tenantAddUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove users from a tenant
     */
    async tenantRemoveUsersRaw(requestParameters: TenantRemoveUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantRemoveUsers.');
        }

        if (requestParameters.userUuidList === null || requestParameters.userUuidList === undefined) {
            throw new runtime.RequiredError('userUuidList','Required parameter requestParameters.userUuidList was null or undefined when calling tenantRemoveUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/remove_users/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserUuidListToJSON(requestParameters.userUuidList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Remove users from a tenant
     */
    async tenantRemoveUsers(requestParameters: TenantRemoveUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.tenantRemoveUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users in the tenant
     */
    async tenantUsersRaw(requestParameters: TenantUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/users/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Get all users in the tenant
     */
    async tenantUsers(requestParameters: TenantUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.tenantUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsCreateRaw(requestParameters: TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling tenantsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters.tenant),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsCreate(requestParameters: TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.tenantsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsDestroyRaw(requestParameters: TenantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsDestroy(requestParameters: TenantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tenantsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tenant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantFromJSON));
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tenant>> {
        const response = await this.tenantsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsPartialUpdateRaw(requestParameters: TenantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTenantToJSON(requestParameters.patchedTenant),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsPartialUpdate(requestParameters: TenantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.tenantsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsRetrieveRaw(requestParameters: TenantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsRetrieve(requestParameters: TenantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.tenantsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsUpdateRaw(requestParameters: TenantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling tenantsUpdate.');
        }

        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling tenantsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tenants/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters.tenant),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * A viewset that serializes Users
     */
    async tenantsUpdate(requestParameters: TenantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.tenantsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
